services:
  mongodb:
    image: mongo:latest
    container_name: my-mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    networks:
      - my_network
  redis:
    image: redis:latest
    container_name: redis-cache
    ports:
      - '6379:6379'
    networks:
      - my_network
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - my_network
  nginx:
    image: nginx:latest
    container_name: nginx-load-balancer
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - '80:80'
    depends_on:
      - backend1
      - backend2
    networks:
      - my_network
  
  backend1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend1
    depends_on:
      - mongodb
      - redis
      - minio
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: pins
    ports:
      - '8081:5005'
    networks:
      - my_network

  backend2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend2
    depends_on:
      - mongodb
      - redis
      - minio
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: pins
    ports:
      - '8082:5005'
    networks:
      - my_network

volumes:
  mongodb_data:
  minio_data:

networks:
  my_network: